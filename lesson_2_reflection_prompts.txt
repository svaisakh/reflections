What happens when you initialize a repository? Why do you need to do it?

	When a repository is initialized, Git adds a .git hidden
	meta-directory containing files for tracking the changes to the files
	in the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The working directory is just a plain ol' directory on your computer.
	There's nothing special about it, nor is it related to file sharing,
	version control, Git or any hocus pocus.

	The repository is a collection of snapshots of all your files on
	the working directory. It resides with Git and is actually meta-
	data that is used to track 'changes' to the files.

	The staging area is an intermediate buffer of files that mediates
	transfer from the working directory to the repository.
	You add files that you want to commit to the staging area first.
	And then, when you do commit, all the files in the staging area
	are tracked by git and stored in the repository.

	If there were no staging area, we'd have two options:
		1. Commit files individually:
			Monsterously unthinkable in a big bad project.
		2. Commit all files:
			What if a few files led to a logical change?
			Why would you keep track of them?

	The staging area provides flexibility to the programmer.

How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

When would you want to use a remote repository rather than keeping all your work
local?

    If it's something I expect others to be working on, I'd better not store
    code in a local repo. For example, if I am making a proprietary software
    with a team, it needs to be accessable and editable by everyone. Or,
    if it's an open source project, I expect collaborators to get their
    hands dirty as well.
    
    Even if I don't expect others to use it, I might as well make a
    GitHub repo since it is cloud connected. I can access it easily
    everwhere I go, and I don't need to rely on my whimpy little hard
    drive.
    
    Note to self: Can't I just store my local repo in Dropbox to
    circumvent this?

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Simple reason...
    I have no idea what changes were made.

    What if the changes is in the file I am currently working on?
    Better yet, what if the LINE I am on right now was changed by someone
    else?
    What happens when I find that in the next second, all my hard work
    is gone, automatically?

    You don't want me angry.

    The solution is to let me decide when I've made a logical, local change.
    Then, I can pull the repo to find what else has changed.
    If there's a conflict, Git will let me know, and I can trash-talk the other
    collaborators and have my way.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Clones are identical repos. They can be both locals or a local from a remote.

    A branch is a different set of labelled commits that has a common root with
    another branch.

    A fork is GitHub cloning one of its repos from one user to another.
    It's just a clone but with added GitHub features such as tracking.

    You should use clones when you want to work locally instead of on the cloud.

    If it's an existing repo from another user, you would want to fork it to add
    yourself as a collaborator while also giving the user credit and linking
    with his work.

    If you're just working on a local version and want to go off on a tangent
    (say for adding a feature, fixing a bug, or just pure experimentation),
    you should just switch branches.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    When collaborating, it is imperative to know what changes were commited
    locally and to separate them from remote changes.

    Git does this ridiculously simply using its inbuilt branching mechanism.

    When local changes are made, they are made on the master branch
    (or any others). Remote changes are made on the master branch
    of the remote repo.

    A fetch request fetches all remote changes to master and commits them
    to the local origin/master (different name depending on the remote and 
    branch name) branch.

    These changes can then be viewed through git diff master origin/master.

    Once finallized, the branches can be merged locally and pushed if
    needed.

    A pull request combines the two commands (i.e. fetch and pull).

    If there were no fetching mechanism, how would git keep track of what
    changes were made and where? 

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Tedious.

    There would probably be someone who is in charge of making sense of all
    the changes and putting it all together.

    The code would be heavily commented and segmented.

    Filenames would need to have suffixes with version numbers and an ID
    for the collaborator.

    If this is an open source project where I expect a lot of independent
    collaborators, I wouldn't be able to manage.

    All in all, it would be a pain in the f**g**s.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Same as local.

    If I am working on something that will take multiple commits to add/fix/experiment
    with, I'll likely want to do it in a separate branch.

    This is especially usefull when collaborating as it allows others to see exactly
    what you were working on and the entire history of commits that led to it.

    It also allows for flexibility since, more than likely, by the time the change is
    made, other changes will have also been made.

    It's nice to incorporate all changes into what you're doing.
